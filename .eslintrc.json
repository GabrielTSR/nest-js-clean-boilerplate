{
    "root": true,
    "env": {
        "es6": true,
        "node": true
    },
    "extends": [
        "airbnb-base",
        "airbnb-typescript/base",
        "eslint:all",
        "plugin:@typescript-eslint/all",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        "plugin:@typescript-eslint/strict",
        "plugin:eslint-comments/recommended",
        "plugin:eslint-plugin/all",
        "plugin:flowtype/recommended",
        "plugin:import/recommended",
        "plugin:import/typescript",
        "plugin:prettier/recommended",
        "prettier",
        "standard-with-typescript"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": "latest",
        "sourceType": "module",
        "project": "./tsconfig.json",
        "tsconfigRootDir": "./"
    },
    "plugins": [
        "@typescript-eslint",
        "eslint-comments",
        "flowtype",
        "import",
        "no-loops",
        "prettier",
        "spellcheck",
        "sort-imports-es6-autofix",
        "sort-keys-fix",
        "unused-imports"
    ],
    "rules": {
        /* Prettier - Default */
        "prettier/prettier": [
            "error",
            {
                "endOfLine": "lf",
                "printWidth": 100,
                "semi": true,
                "singleQuote": true,
                "tabWidth": 4,
                "trailingComma": "none",
                "useTabs": false
            }
        ],

        /* EsLint - Default */
        "accessor-pairs": "off",
        "array-bracket-newline": ["error", "consistent"],
        "array-bracket-spacing": "error",
        "array-callback-return": "error",
        "array-element-newline": ["error", "consistent"],
        "arrow-body-style": ["error", "as-needed"],
        "arrow-parens": ["error", "as-needed"],
        "arrow-spacing": "error",
        "block-scoped-var": "error",
        "block-spacing": "error",
        "brace-style": ["error", "1tbs"],
        "camelcase": "error",
        "capitalized-comments": ["error", "always"],
        "class-methods-use-this": "error",
        "comma-dangle": ["error", "only-multiline"],
        "comma-spacing": "error",
        "comma-style": ["error", "last"],
        "complexity": ["error", 2],
        "computed-property-spacing": "error",
        "consistent-return": "error",
        "consistent-this": "error",
        "constructor-super": "error",
        "curly": ["error", "multi"],
        "default-case": "error",
        "default-case-last": "error",
        "default-param-last": "error" /* Enforce default parameters to be last */,
        "dot-location": ["error", "property"],
        "dot-notation": ["error", { "allowKeywords": true }],
        "eol-last": "error",
        "eqeqeq": "error",
        "for-direction": "error",
        "func-call-spacing": "error",
        "func-names": ["error", "always"],
        "func-name-matching": "error",
        "func-style": [
            "error",
            "expression"
        ] /* Enforce the consistent use of either function declarations or expressions */,
        "function-call-argument-newline": ["error", "consistent"],
        "function-paren-newline": ["error", "consistent"],
        "generator-star-spacing": "error",
        "getter-return": "error",
        "grouped-accessor-pairs": "error",
        "guard-for-in": "error",
        "id-denylist": ["error"] /* Disallow specified identifiers */,
        "id-length": ["error", { "min": 2 }],
        "id-match": ["error", "^[A-Z](([_a-zA-Z]?)*)$|^[a-z](([a-z]+[A-Z]?)*)$"],
        "implicit-arrow-linebreak": ["error", "beside"],
        "indent": "off",
        "init-declarations": "error",
        "jsx-quotes": ["error", "prefer-double"],
        "key-spacing": ["error", { "afterColon": true, "beforeColon": false }],
        "keyword-spacing": "error",
        "line-comment-position": [
            "error",
            { "position": "above" }
        ] /* Enforce position of line comments */,
        "linebreak-style": ["error", "unix"],
        "lines-around-comment": [
            "error",
            {
                "afterBlockComment": false,
                "afterLineComment": false,
                "beforeBlockComment": true,
                "beforeLineComment": true
            }
        ],
        "lines-between-class-members": "error",
        "logical-assignment-operators": ["error", "always"],
        "max-depth": ["error", 3],
        "max-len": [
            "error",
            100,
            {
                "ignoreComments": true,
                "ignoreRegExpLiterals": true,
                "ignoreStrings": true,
                "ignoreTemplateLiterals": true,
                "ignoreUrls": true
            }
        ],
        "max-classes-per-file": ["error", 1],
        "max-lines": ["error", 300],
        "max-lines-per-function": ["error", 50],
        "max-nested-callbacks": ["error", 3],
        "max-params": ["error", 3],
        "max-statements": ["error", 10],
        "max-statements-per-line": ["error", { "max": 1 }],
        "multiline-comment-style": ["error", "starred-block"],
        "multiline-ternary": ["error", "always"],
        "new-cap": "error",
        "new-parens": "error",
        "newline-per-chained-call": ["error", { "ignoreChainWithDepth": 2 }],
        "no-alert": "error",
        "no-array-constructor": "error",
        "no-async-promise-executor": "error",
        "no-await-in-loop": "error",
        "no-bitwise": "error",
        "no-caller": "error",
        "no-case-declarations": "error",
        "no-class-assign": "error",
        "no-compare-neg-zero": "error",
        "no-cond-assign": "error",
        "no-confusing-arrow": "error",
        "no-console": "warn",
        "no-const-assign": "error",
        "no-constant-binary-expression": "error",
        "no-constant-condition": "error",
        "no-constructor-return": "error",
        "no-continue": "error",
        "no-control-regex": "error",
        "no-delete-var": "error",
        "no-debugger": "error",
        "no-div-regex": "error",
        "no-dupe-args": "error",
        "no-dupe-class-members": "error",
        "no-dupe-else-if": "error",
        "no-dupe-keys": "error",
        "no-duplicate-case": "error",
        "no-duplicate-imports": "error",
        "no-else-return": ["error", { "allowElseIf": false }],
        "no-empty": ["error", { "allowEmptyCatch": false }],
        "no-empty-character-class": "error",
        "no-empty-function": "error",
        "no-empty-pattern": "error",
        "no-empty-static-block": "error",
        "no-eq-null": "error",
        "no-eval": "error",
        "no-ex-assign": "error",
        "no-extend-native": "error",
        "no-extra-bind": "error",
        "no-extra-boolean-cast": "error",
        "no-extra-label": "error",
        "no-extra-parens": "error",
        "no-extra-semi": "error",
        "no-fallthrough": "error",
        "no-floating-decimal": "error",
        "no-func-assign": "error",
        "no-global-assign": "error",
        "no-implicit-coercion": "error",
        "no-implicit-globals": "error",
        "no-implied-eval": "error",
        "no-import-assign": "error",
        "no-inline-comments": "error",
        "no-inner-declarations": "error",
        "no-invalid-regexp": "error",
        "no-invalid-this": "error",
        "no-irregular-whitespace": "error",
        "no-iterator": "error",
        "no-label-var": "error",
        "no-labels": "error",
        "no-lone-blocks": "error",
        "no-lonely-if": "error",
        "no-loop-func": "error",
        "no-loss-of-precision": "error",
        "no-magic-numbers": "error",
        "no-misleading-character-class": "error",
        "no-mixed-operators": "error",
        "no-mixed-spaces-and-tabs": "error",
        "no-multi-assign": "error",
        "no-multi-spaces": "error",
        "no-multi-str": "error",
        "no-multiple-empty-lines": ["error", { "max": 2, "maxBOF": 0, "maxEOF": 0 }],
        "no-negated-condition": "error",
        "no-nested-ternary": "error",
        "no-new": "error",
        "no-new-func": "error",
        "no-new-native-nonconstructor": "error",
        "no-new-object": "error",
        "no-new-symbol": "error",
        "no-new-wrappers": "error",
        "no-nonoctal-decimal-escape": "error",
        "no-obj-calls": "error",
        "no-octal": "error",
        "no-octal-escape": "error",
        "no-param-reassign": "error",
        "no-plusplus": "error" /* Disallow the unary operators ++ and -- */,
        "no-process-exit": "off",
        "no-promise-executor-return": "error",
        "no-proto": "error",
        "no-prototype-builtins": "error" /* Disallow calling some Object.prototype methods directly on objects */,
        "no-redeclare": "error",
        "no-regex-spaces": "error",
        "no-restricted-exports": ["error", { "restrictedNamedExports": [] }],
        "no-restricted-globals": [
            "error",
            {
                "message": "Use local parameter instead.",
                "name": "event"
            },
            {
                "message": "Do not commit fdescribe. Use describe instead.",
                "name": "fdescribe"
            }
        ],
        "no-restricted-imports": ["error", "underscore"],
        "no-restricted-properties": [
            "error",
            {
                "message": "Use .slice instead of .substring.",
                "property": "substring"
            },
            { "message": "Use .slice instead of .substr.", "property": "substr" },
            {
                "message": "Use assert.strictEqual instead of assert.equal.",
                "object": "assert",
                "property": "equal"
            },
            {
                "message": "Use assert.notStrictEqual instead of assert.notEqual.",
                "object": "assert",
                "property": "notEqual"
            },
            {
                "message": "Use assert.deepStrictEqual instead of assert.deepEqual.",
                "object": "assert",
                "property": "deepEqual"
            },
            {
                "message": "Use assert.notDeepStrictEqual instead of assert.notDeepEqual.",
                "object": "assert",
                "property": "notDeepEqual"
            }
        ],
        "no-restricted-syntax": ["error", "WithStatement", "BinaryExpression[operator='in']"],
        "no-return-assign": "error",
        "no-return-await": "error",
        "no-script-url": "error",
        "no-self-assign": "error",
        "no-self-compare": "error",
        "no-sequences": "error",
        "no-setter-return": "error",
        "no-shadow": "error",
        "no-shadow-restricted-names": "error",
        "no-sparse-arrays": "error",
        "no-tabs": "error",
        "no-template-curly-in-string": "error",
        "no-ternary": "error",
        "no-this-before-super": "error",
        "no-throw-literal": "error",
        "no-trailing-spaces": "error",
        "no-undef": ["error", { "typeof": true }],
        "no-undef-init": "error",
        "no-undefined": "error",
        "no-underscore-dangle": "off",
        "no-unexpected-multiline": "error",
        "no-unmodified-loop-condition": "error",
        "no-unneeded-ternary": "error",
        "no-unreachable": "error",
        "no-unreachable-loop": "error",
        "no-unsafe-finally": "error",
        "no-unsafe-negation": "error",
        "no-unsafe-optional-chaining": "error",
        "no-unused-expressions": "error",
        "no-unused-labels": "error",
        "no-unused-private-class-members": "error",
        "no-unused-vars": "off",
        "no-use-before-define": "error",
        "no-useless-backreference": "error",
        "no-useless-call": "error",
        "no-useless-catch": "error",
        "no-useless-computed-key": "error",
        "no-useless-concat": "error",
        "no-useless-constructor": "error",
        "no-useless-escape": "error",
        "no-useless-rename": "error",
        "no-useless-return": "error",
        "no-var": "error" /* Require let or const instead of var */,
        "no-void": "error",
        "no-warning-comments": "off",
        "no-with": "error",
        "no-whitespace-before-property": "error",
        "nonblock-statement-body-position": ["error", "beside"],
        "object-curly-newline": ["error", { "consistent": true, "multiline": true }],
        "object-curly-spacing": "error",
        "object-property-newline": ["error", { "allowAllPropertiesOnSameLine": true }],
        "object-shorthand": ["error", "always", { "avoidExplicitReturnArrows": true }],
        "one-var": ["error", "never"],
        "one-var-declaration-per-line": "error",
        "operator-assignment": "error",
        "operator-linebreak": "error",
        "padded-blocks": ["error", "never"] /* Require or disallow padding within blocks */,
        "padding-line-between-statements": [
            "error",
            { "blankLine": "always", "next": "*", "prev": ["const", "let", "var"] },
            {
                "blankLine": "any",
                "next": ["const", "let", "var"],
                "prev": ["const", "let", "var"]
            }
        ],
        "prefer-arrow-callback": "error",
        "prefer-const": "error" /* Require const declarations for variables that are never reassigned after declared */,
        "prefer-destructuring": [
            "error",
            {
                "AssignmentExpression": {
                    "array": true,
                    "object": false
                },
                "VariableDeclarator": {
                    "array": false,
                    "object": true
                }
            },
            {
                "enforceForRenamedProperties": false
            }
        ] /* Require destructuring from arrays and/or objects */,
        "prefer-exponentiation-operator": "error",
        "prefer-named-capture-group": "error",
        "prefer-numeric-literals": "error",
        "prefer-object-has-own": "error",
        "prefer-object-spread": "error" /* Disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead */,
        "prefer-promise-reject-errors": "error",
        "prefer-regex-literals": "error",
        "prefer-rest-params": "error",
        "prefer-spread": "error",
        "prefer-template": "error",
        "quote-props": "error" /* Require quotes around object literal property names */,
        "quotes": [
            "error",
            "single",
            { "avoidEscape": true }
        ] /* Enforce the consistent use of either backticks, double, or single quotes */,
        "radix": "error",
        "require-await": "error" /* This rule warns async functions which have no await expression. */,
        "require-atomic-updates": ["error", { "allowProperties": false }],
        "require-unicode-regexp": "error",
        "require-yield": "error",
        "rest-spread-spacing": "error",
        "semi": ["error", "always"],
        "semi-spacing": ["error", { "after": true, "before": false }],
        "semi-style": "error",
        "sort-imports": [
            "error",
            {
                "allowSeparatedGroups": false,
                "ignoreCase": false,
                "ignoreDeclarationSort": false,
                "ignoreMemberSort": false,
                "memberSyntaxSortOrder": ["none", "all", "multiple", "single"]
            }
        ],
        "sort-keys": "off",
        "sort-vars": ["error", { "ignoreCase": false }],
        "space-before-blocks": "error",
        "space-before-function-paren": "off",
        "space-in-parens": "error",
        "space-infix-ops": "error",
        "space-unary-ops": ["error", { "nonwords": false, "words": true }],
        "spaced-comment": ["error", "always", { "exceptions": ["-"] }],
        "strict": ["error", "global"],
        "switch-colon-spacing": "error",
        "symbol-description": "error",
        "template-curly-spacing": ["error", "never"],
        "template-tag-spacing": "error",
        "unicode-bom": "error",
        "use-isnan": "error",
        "valid-typeof": "error",
        "vars-on-top": "error",
        "wrap-iife": "error",
        "wrap-regex": "error",
        "yield-star-spacing": "error",
        "yoda": ["error", "never", { "exceptRange": true }],

        /* Import Plugin - Default */
        "import/order": "off",
        "import/extensions": [
            "error",
            "ignorePackages",
            {
                "ts": "never",
                "tsx": "never"
            }
        ],
        "import/first": "error",
        "import/newline-after-import": "error",
        "import/no-duplicates": "error",
        "import/no-mutable-exports": "error",
        "import/no-webpack-loader-syntax": "error",
        "import/prefer-default-export": "off",

        /* No Loops - Default */
        "no-loops/no-loops": 2,

        /* Spell Check - Default */
        "spellcheck/spell-checker": [
            2,
            {
                "comments": false,
                "strings": false,
                "identifiers": true,
                "templates": true,
                "lang": "en_US",
                "skipWords": ["cors", "cron", "readonly"],
                "skipIfMatch": ["http://[^s]*", "https://[^s]*"]
            }
        ],

        /* Sort Keys Fix - Default */
        "sort-keys-fix/sort-keys-fix": "error",

        /* Sort Imports - Default */
        "sort-imports-es6-autofix/sort-imports-es6": [
            2,
            {
                "ignoreCase": false,
                "ignoreMemberSort": false,
                "memberSyntaxSortOrder": ["none", "all", "multiple", "single"]
            }
        ],

        /* Comments - Default */
        "eslint-comments/disable-enable-pair": "error",
        "eslint-comments/no-aggregating-enable": "error",
        "eslint-comments/no-duplicate-disable": "error",
        "eslint-comments/no-unlimited-disable": "error",
        "eslint-comments/no-unused-enable": "error",

        /* Flowtype - Default */
        "flowtype/boolean-style": [2, "boolean"],
        "flowtype/define-flow-type": 1,
        "flowtype/delimiter-dangle": [2, "never"],
        "flowtype/generic-spacing": [2, "never"],
        "flowtype/interface-id-match": [2, "^([A-Z][a-z0-9]+)+Type$"],
        "flowtype/no-mixed": 2,
        "flowtype/no-primitive-constructor-types": 2,
        "flowtype/no-types-missing-file-annotation": "off",
        "flowtype/no-weak-types": 2,
        "flowtype/object-type-delimiter": [2, "comma"],
        "flowtype/require-parameter-type": 2,
        "flowtype/require-readonly-react-props": 0,
        "flowtype/require-return-type": [
            2,
            "always",
            {
                "annotateUndefined": "never"
            }
        ],
        "flowtype/require-valid-file-annotation": 2,
        "flowtype/semi": [2, "always"],
        "flowtype/space-after-type-colon": [2, "always"],
        "flowtype/space-before-generic-bracket": [2, "never"],
        "flowtype/space-before-type-colon": [2, "never"],
        "flowtype/type-id-match": [2, "^([A-Z][a-z0-9]+)+Type$"],
        "flowtype/union-intersection-spacing": [2, "always"],
        "flowtype/use-flow-type": 1,
        "flowtype/valid-syntax": 1,

        /* Unused Imports - Default */
        "unused-imports/no-unused-imports": "error",
        "unused-imports/no-unused-vars": [
            "error",
            { "vars": "all", "args": "after-used", "caughtErrors": "all" }
        ],

        /* Typescript Eslint - Default */
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/array-type": "error",
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/ban-ts-comment": "error",
        "@typescript-eslint/ban-tslint-comment": "error",
        "@typescript-eslint/ban-types": "error",
        "@typescript-eslint/brace-style": "off",
        "@typescript-eslint/class-literal-property-style": "error",
        "@typescript-eslint/comma-dangle": "off",
        "@typescript-eslint/comma-spacing": "off",
        "@typescript-eslint/consistent-generic-constructors": "error",
        "@typescript-eslint/consistent-indexed-object-style": "error",
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/consistent-type-definitions": "error",
        "@typescript-eslint/consistent-type-exports": "error",
        "@typescript-eslint/consistent-type-imports": "error",
        "@typescript-eslint/default-param-last": "off",
        "@typescript-eslint/dot-notation": "off",
        "@typescript-eslint/explicit-function-return-type": "error",
        "@typescript-eslint/explicit-member-accessibility": "error",
        "@typescript-eslint/explicit-module-boundary-types": "error",
        "@typescript-eslint/func-call-spacing": "off",
        "@typescript-eslint/indent": "off",
        "@typescript-eslint/init-declarations": "off",
        "@typescript-eslint/keyword-spacing": "off",
        "@typescript-eslint/lines-between-class-members": "error",
        "@typescript-eslint/member-delimiter-style": [
            "error",
            {
                "multiline": {
                    "delimiter": "semi",
                    "requireLast": true
                },
                "singleline": {
                    "delimiter": "semi",
                    "requireLast": false
                },
                "multilineDetection": "brackets"
            }
        ],
        "@typescript-eslint/member-ordering": "error",
        "@typescript-eslint/method-signature-style": "error",
        "@typescript-eslint/naming-convention": [
            "error",
            {
                "selector": "variableLike",
                "format": ["camelCase", "PascalCase", "UPPER_CASE"]
            }
        ],
        "@typescript-eslint/no-array-constructor": "off",
        "@typescript-eslint/no-base-to-string": "error",
        "@typescript-eslint/no-confusing-non-null-assertion": "error",
        "@typescript-eslint/no-confusing-void-expression": "error",
        "@typescript-eslint/no-dupe-class-members": "off",
        "@typescript-eslint/no-duplicate-enum-values": "error",
        "@typescript-eslint/no-dynamic-delete": "error",
        "@typescript-eslint/no-empty-function": "error",
        "@typescript-eslint/no-empty-interface": "error",
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/no-extra-non-null-assertion": "error",
        "@typescript-eslint/no-extra-parens": "error",
        "@typescript-eslint/no-extra-semi": "error",
        "@typescript-eslint/no-extraneous-class": "error",
        "@typescript-eslint/no-floating-promises": "error",
        "@typescript-eslint/no-for-in-array": "error",
        "@typescript-eslint/no-implied-eval": "error",
        "@typescript-eslint/no-inferrable-types": "error",
        "@typescript-eslint/no-invalid-this": "error",
        "@typescript-eslint/no-invalid-void-type": "error",
        "@typescript-eslint/no-loop-func": "off",
        "@typescript-eslint/no-loss-of-precision": "error",
        "@typescript-eslint/no-magic-numbers": "off",
        "@typescript-eslint/no-meaningless-void-operator": "error",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-misused-promises": "error",
        "@typescript-eslint/no-namespace": "error",
        "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
        "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/parameter-properties": "error",
        "@typescript-eslint/no-redeclare": "error",
        "@typescript-eslint/no-redundant-type-constituents": "error",
        "@typescript-eslint/no-require-imports": "error",
        "@typescript-eslint/no-restricted-imports": "error",
        "@typescript-eslint/no-shadow": "error",
        "@typescript-eslint/no-this-alias": "error",
        "@typescript-eslint/no-throw-literal": "error",
        "@typescript-eslint/no-type-alias": [
            "error",
            {
                "allowAliases": "never",
                "allowCallbacks": "always",
                "allowConditionalTypes": "never",
                "allowConstructors": "never",
                "allowLiterals": "always",
                "allowMappedTypes": "always",
                "allowTupleTypes": "never",
                "allowGenerics": "always"
            }
        ],
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
        "@typescript-eslint/no-unnecessary-condition": "error",
        "@typescript-eslint/no-unnecessary-qualifier": "error",
        "@typescript-eslint/no-unnecessary-type-arguments": "error",
        "@typescript-eslint/no-unnecessary-type-assertion": "error",
        "@typescript-eslint/no-unnecessary-type-constraint": "error",
        "@typescript-eslint/no-unsafe-argument": "error",
        "@typescript-eslint/no-unsafe-assignment": "error",
        "@typescript-eslint/no-unsafe-call": "error",
        "@typescript-eslint/no-unsafe-declaration-merging": "error",
        "@typescript-eslint/no-unsafe-member-access": "error",
        "@typescript-eslint/no-unsafe-return": "error",
        "@typescript-eslint/no-unused-expressions": "error",
        "@typescript-eslint/no-unused-vars": "off",
        "@typescript-eslint/no-use-before-define": "error",
        "@typescript-eslint/no-useless-constructor": "off",
        "@typescript-eslint/no-useless-empty-export": "error",
        "@typescript-eslint/no-var-requires": "error",
        "@typescript-eslint/non-nullable-type-assertion-style": "error",
        "@typescript-eslint/object-curly-spacing": "off",
        "@typescript-eslint/padding-line-between-statements": "error",
        "@typescript-eslint/prefer-as-const": "error",
        "@typescript-eslint/prefer-enum-initializers": "error",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/prefer-includes": "error",
        "@typescript-eslint/prefer-literal-enum-member": "error",
        "@typescript-eslint/prefer-namespace-keyword": "error",
        "@typescript-eslint/prefer-nullish-coalescing": "error",
        "@typescript-eslint/prefer-optional-chain": "error",
        "@typescript-eslint/prefer-readonly": "error",
        "@typescript-eslint/prefer-readonly-parameter-types": "off",
        "@typescript-eslint/prefer-reduce-type-parameter": "error",
        "@typescript-eslint/prefer-regexp-exec": "error",
        "@typescript-eslint/prefer-return-this-type": "error",
        "@typescript-eslint/prefer-string-starts-ends-with": "error",
        "@typescript-eslint/prefer-ts-expect-error": "error",
        "@typescript-eslint/promise-function-async": "error",
        "@typescript-eslint/quotes": "off",
        "@typescript-eslint/require-array-sort-compare": "error",
        "@typescript-eslint/require-await": "error",
        "@typescript-eslint/restrict-plus-operands": "error",
        "@typescript-eslint/restrict-template-expressions": "error",
        "@typescript-eslint/return-await": "off",
        "@typescript-eslint/semi": "off",
        "@typescript-eslint/sort-type-constituents": "error",
        "@typescript-eslint/space-before-blocks": "off",
        "@typescript-eslint/space-before-function-paren": "off",
        "@typescript-eslint/space-infix-ops": "off",
        "@typescript-eslint/strict-boolean-expressions": "error",
        "@typescript-eslint/switch-exhaustiveness-check": "error",
        "@typescript-eslint/triple-slash-reference": "error",
        "@typescript-eslint/type-annotation-spacing": "error",
        "@typescript-eslint/typedef": "error",
        "@typescript-eslint/unbound-method": "error",
        "@typescript-eslint/unified-signatures": "error"
    },
    "overrides": [
        {
            "files": ["*spec.*"],
            "rules": {
                "implicit-arrow-linebreak": "off",
                "init-declarations": "off",
                "newline-per-chained-call": "off",
                "no-magic-numbers": "off",
                "no-undef": "off",
                "sort-imports": "off",
                "flowtype/require-return-type": "off",
                "@typescript-eslint/no-unsafe-assignment": "off",
                "@typescript-eslint/no-unsafe-call": "off",
                "@typescript-eslint/no-unsafe-member-access": "off",
                "@typescript-eslint/no-unsafe-return": "off",
                "no-return-await": "off",
                "require-await": "off"
            }
        }
    ],
    "settings": {
        "flowtype": {
            "onlyFilesWithFlowAnnotation": false
        },
        "import/ignore": ["express"],
        "import/parsers": {
            "@typescript-eslint/parser": [".ts", ".tsx"]
        },
        "import/resolver": {
            "typescript": {
                "alwaysTryTypes": true,
                "project": "./tsconfig.json"
            }
        }
    }
}
